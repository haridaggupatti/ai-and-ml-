{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "command",
        "command": {
          "command": "npm install metaapi.cloud-sdk --save",
          "timeout": 60000
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "metaApiConnection.js",
          "path": "/utils/metaApiConnection.js",
          "content": "const MetaApi = require('metaapi.cloud-sdk').default;\n\nclass MetaApiConnection {\n  constructor(metaApiKey, accountId) {\n    if (!metaApiKey || !accountId) {\n      throw new Error('MetaApi key or account ID is missing.');\n    }\n    this.api = new MetaApi(metaApiKey);\n    this.accountId = accountId;\n  }\n\n  async connect() {\n    try {\n      const account = await this.api.metatraderAccountApi.getAccount(this.accountId);\n      const connection = await account.connect();\n      console.log(`Connected to ${account.name}, connection id is ${connection.id}.`);\n      return connection;\n    } catch (error) {\n      console.error(`Error during MetaApi connection: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = MetaApiConnection;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "metaApiRoutes.js",
          "path": "/routes/metaApiRoutes.js",
          "content": "const express = require('express');\nconst MetaApiConnection = require('../utils/metaApiConnection');\nconst router = express.Router();\n\nrouter.get('/test-connection', async (req, res) => {\n  const metaApiKey = process.env.META_API_KEY; // INPUT_REQUIRED {Put your MetaApi key here}\n  const accountId = process.env.META_API_ACCOUNT_ID; // INPUT_REQUIRED {Put your MetaApi account ID here}\n\n  try {\n    const metaApiConnection = new MetaApiConnection(metaApiKey, accountId);\n    await metaApiConnection.connect();\n    res.status(200).json({ message: 'Successfully connected to MetaTrader.' });\n  } catch (error) {\n    res.status(500).json({ message: `Failed to connect to MetaTrader: ${error.message}` });\n  }\n});\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "index.js",
          "path": "/index.js",
          "content": "require('dotenv').config();\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst authRoutes = require('./routes/authRoutes');\nconst metaApiRoutes = require('./routes/metaApiRoutes');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\nmongoose.connect('mongodb://localhost/ai_and_ml_');\n\napp.use(bodyParser.json());\napp.use('/api/auth', authRoutes);\napp.use('/api/metaapi', metaApiRoutes);\n\napp.get('/ping', (req, res) => {\n  res.send('pong');\n});\n\n// [OLD CODE] Centralized error handling\n// [OLD CODE] Error log setup\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n}).on('error', (err) => {\n  console.error(`Error starting server: ${err.message}`);\n});\n"
        }
      },
      {
        "type": "human_intervention",
        "human_intervention_description": "You need to add your MetaApi key and MetaApi account ID to your .env file. Make sure you don't share this file as it contains sensitive data."
      }
    ]
  }
}