{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "newsAnalysisService.js",
          "path": "/services/newsAnalysisService.js",
          "content": "const axios = require('axios');\nconst cheerio = require('cheerio');\nconst Sentiment = require('sentiment');\n\nclass NewsAnalysisService {\n  constructor(newsUrl) {\n    this.newsUrl = newsUrl;\n    this.sentiment = new Sentiment();\n  }\n\n  async fetchLatestNews() {\n    try {\n      const response = await axios.get(this.newsUrl);\n      const $ = cheerio.load(response.data);\n      const articles = $('article').map((i, el) => {\n        const headline = $(el).find('h2').text();\n        const content = $(el).find('p').text();\n        return { headline, content };\n      }).get();\n      return articles;\n    } catch (error) {\n      console.error(`Error fetching news articles: ${error.message}`);\n      throw error;\n    }\n  }\n\n  analyzeSentiment(articles) {\n    return articles.map(article => {\n      const result = this.sentiment.analyze(article.content);\n      return { ...article, sentimentScore: result.score };\n    });\n  }\n}\n\nmodule.exports = NewsAnalysisService;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "decisionMaker.js",
          "path": "/ai/decisionMaker.js",
          "content": "const { applyFeedbackToStrategy } = require('../services/strategyService');\nconst NewsAnalysisService = require('../services/newsAnalysisService');\n\nexports.makeDecision = async (userId, baseStrategyConfig, marketData) => {\n  let strategyConfig = await applyFeedbackToStrategy(userId, baseStrategyConfig);\n  const newsAnalysisService = new NewsAnalysisService('https://example.com/news'); // INPUT_REQUIRED: Replace with actual news URL\n  const articles = await newsAnalysisService.fetchLatestNews();\n  const analyzedArticles = newsAnalysisService.analyzeSentiment(articles);\n  const averageSentiment = analyzedArticles.reduce((sum, article) => sum + article.sentimentScore, 0) / analyzedArticles.length;\n  let decision;\n  if (averageSentiment > 0) {\n    decision = strategyConfig.increaseInvestment();\n  } else if (averageSentiment < 0) {\n    decision = strategyConfig.decreaseInvestment();\n  } else {\n    decision = strategyConfig.baseStrategy();\n  }\n  return decision;\n};\n"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm install axios cheerio sentiment",
          "timeout": 60000
        }
      }
    ]
  }
}