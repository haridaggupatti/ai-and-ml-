endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are an experienced tech lead in a software development agency and your main task is to break down the project
    into smaller tasks that developers will do. You must specify each task as clear as possible. Each task must have a description
    of what needs to be implemented, a programmatic goal that will determine if a task can be marked as done from a programmatic
    perspective and user-review goal that will determine if a task is done or not but from a user perspective since it will
    be reviewed by a human.
- role: user
  content: 'You are working in a software development agency and a project manager and software architect approach you telling
    you that you''re assigned to work on a new project. You are working on a App called "ai_and_ml_" and you need to create
    a detailed development plan so that developers can start developing the app.


    Here is a high level description of "ai_and_ml_":

    ```

    The project will encompass the development of a software application, designated as "ai_and_ml_", designed to interface
    with MetaTrader 4 (MT4) and MetaTrader 5 (MT5) platforms via APIs, webhooks, or HTTP protocols. The application will perform
    analysis and execute trades automatically within the financial markets, supporting all trading instruments available on
    these platforms.


    Key features of "ai_and_ml_" will include:


    - A decision-making engine using artificial intelligence (AI) and machine learning (ML) to autonomously determine when
    to execute trades.

    - Customizable user-defined trading strategies, which once written and saved in normal language, allow the application
    to trade based on specific methods like martingale, averaging, high-frequency trading (HFT), or bespoke strategies.

    - A visual graphical representation (Graf) for tracking account growth, providing insights and advice for strategy improvement.

    - The capability to learn and evolve its decision-making process through the analysis of historical data, factoring in
    real-time market behaviors and user feedback.

    - An AI component that employs statistical analysis, machine learning models, and deep learning to analyze historical
    data, with a caution against overfitting and market evolution.

    - Processing of real-time market data through advanced algorithms to respond to live market changes, coupled with challenges
    related to data volatility.

    - A mechanism for user feedback incorporation, allowing personalization of the AI and adjustment of trading strategies
    and risk management rules.

    - A comprehensive integration of these elements for continuous learning and adaptation, using techniques such as online
    learning and reinforcement learning, while ensuring ethical and regulatory compliance.

    - Risk management features with AI and ML creating autonomous decisions on aspects such as stop-loss and take-profit parameters.

    - A secure user authentication system to control access to personal trading strategies and performance analytics.


    The AI and ML components will be developed to progressively enhance their decision-making capabilities while conforming
    to ethical standards and financial regulations. The system aims to balance customization, user experience, and financial
    efficacy, requiring continuous monitoring and adjustment for optimal performance.

    ```



    Here are user stories that specify how users use "ai_and_ml_":

    ```


    - User will receive trade execution with above 80% accuracy through the application''s use of neural networks and advanced
    technologies.


    - User will have the application analyze online news sources to inform trading decisions and update the AI with relevant
    information daily.


    ```



    Here are the technologies that you need to use for this project:

    ```


    - Node.js


    - MongoDB


    - PeeWee


    - Bootstrap


    - HTML


    - CSS3


    - Socket.io


    - TensorFlow


    - Keras


    - scikit-learn


    - pandas


    - NumPy


    - matplotlib


    - D3.js


    - axios


    - JWT


    - bcrypt


    - MetaApi SDK


    - cheerio


    - express


    ```




    Before we go into the coding part, I want you to split the development process of creating this app into smaller tasks
    so that it is easier to develop, debug and make the app work. Each smaller task of this app has to be a whole that can
    be reviewed by a developer to make sure we''re on a right track to create this app completely.


    Each task needs to be related only to the development of this app and nothing else - once the app is fully working, that
    is it. There shouldn''t be a task for researching, deployment, writing documentation, or anything that is not writing
    the actual code.


    Now, based on the project details provided, think task by task and create the entire development plan. Start from the
    project setup and specify each task until the moment when the entire app should be fully working.


    **IMPORTANT**

    Dividing project into tasks is extremely important job and has to be done carefully while always strictly following all
    rules listed bellow.


    Rule #1

    There should never be a task that is only testing or ensuring something works, every task must have coding involved. Have
    this in mind for every task, but it is extremely important for last task of project. Testing if app works will be done
    as part of each task.


    Rule #2

    You have to make sure the project is not split into tasks that are too small or simple for no reason but also not too
    big or complex so that they are hard to develop, debug and review. Here are examples of poorly created tasks:


    **too simple tasks**

    - Set up a Node.js project and install all necessary dependencies.

    - Establish a MongoDB database connection using Mongoose with the IP ''127.0.0.1''.


    **too complex tasks**

    - Set up Node.js project with /home, /profile, /register and /login routes that will have user authentication, connection
    to MongoDB with user schemas, mailing of new users and frontend with nice design.


    You must to avoid creating tasks that are too simple or too complex. You have to aim to create tasks that are medium complexity.
    Here are examples of tasks that are good:


    **good tasks**

    - Set up a Node.js project, install all necessary dependencies and set up an express server with a simple route to `/ping`
    that returns the status 200.

    - Establish a MongoDB database connection and implement the message schema using Mongoose for persistent storage of messages.


    Rule #3

    Every app should have different number of tasks depending on complexity. Think task by task and create the minimum number
    of tasks that are relevant for this specific app. Here are some examples of apps with different complexity that can give
    you guidance on how many tasks you should create:


    Example #1:

    app description: "I want to create an app that will just say ''Hello World'' when I open it on my localhost:3000."

    number of tasks: 1-3


    Example #2:

    app description: "Create a node.js app that enables users to register and log into the app. On frontend it should have
    /home (shows user data), /register and /login. It should use sessions to keep user logged in."

    number of tasks: 2-6


    Example #3:

    app description: "A cool online shoe store, with a sleek look. In terms of data models, there are shoes, categories and
    user profiles. For web pages: product listing, details, shopping cart. It must look cool and jazzy."

    number of tasks: 5-15'
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"plan\": {\n        \"type\": \"array\",\n        \"description\"\
    : \"List of development tasks that need to be done to implement the entire plan.\",\n        \"items\": {\n          \
    \  \"type\": \"object\",\n            \"description\": \"Development task that needs to be done to implement the entire\
    \ plan.\",\n            \"properties\": {\n                \"description\": {\n                    \"type\": \"string\"\
    ,\n                    \"description\": \"Description of the development task that needs to be done to implement the entire\
    \ plan.\"\n                },\n                \"programmatic_goal\": {\n                    \"type\": \"string\",\n \
    \                   \"description\": \"Detailed description of programmatic goal. Programmatic goal that will determine\
    \ if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before\
    \ the task is sent to you for a review). All details previously specified by user that are important for this task must\
    \ be included in this programmatic goal.\"\n                },\n                \"user_review_goal\": {\n            \
    \        \"type\": \"string\",\n                    \"description\": \"User review goal that will determine if a task\
    \ is done or not, but from a user perspective since it will be reviewed by a human.\"\n                }\n           \
    \ },\n            \"required\": [\n                \"description\",\n                \"programmatic_goal\",\n        \
    \        \"user_review_goal\"\n            ]\n        }\n    }\n}\n```\n\n"
response: "```json\n{\n    \"plan\": [\n        {\n            \"description\": \"Initialize the project structure with Node.js,\
  \ set up an Express server, and create a default route.\",\n            \"programmatic_goal\": \"The Express server must\
  \ be running on a predefined port, with a GET endpoint at `/ping` which responds with a status code 200 and a plain text\
  \ message 'pong'.\",\n            \"user_review_goal\": \"When accessing the '/ping' endpoint, the browser should display\
  \ the text 'pong'.\"\n        },\n        {\n            \"description\": \"Set up secure authentication and user account\
  \ management using JWT and bcrypt.\",\n            \"programmatic_goal\": \"Implement registration and login endpoints,\
  \ integrating JWT for tokens and bcrypt for password hashing. Include middleware to validate authentication tokens on protected\
  \ routes.\",\n            \"user_review_goal\": \"A user should be able to register and subsequently log in, with invalid\
  \ attempts properly rejected.\"\n        },\n        {\n            \"description\": \"Install and configure the MetaApi\
  \ SDK to establish connectivity with MetaTrader platforms.\",\n            \"programmatic_goal\": \"Create a service to\
  \ authenticate with MetaApi and verify successful connection to both MT4 and MT5 platforms using test credentials.\",\n\
  \            \"user_review_goal\": \"Ensure the connection to MetaTrader is established and can be demonstrated via a test\
  \ account's successful connection status.\"\n        },\n        {\n            \"description\": \"Create the base AI decision-making\
  \ engine structure with TensorFlow, Keras, and scikit-learn, allowing the input of user-defined strategies.\",\n       \
  \     \"programmatic_goal\": \"Develop a basic ML model setup capable of ingesting user-defined parameters and historical\
  \ data, and include a unit test confirming that the model can be trained with dummy data.\",\n            \"user_review_goal\"\
  : \"A predefined and training-capable ML model structure must be in place, evidenced by a successful training test run.\"\
  \n        },\n        {\n            \"description\": \"Implement the data processing module to fetch and prepare real-time\
  \ market data for analysis.\",\n            \"programmatic_goal\": \"Build a module that utilizes pandas and NumPy to acquire,\
  \ parse, and format live trading data, ensuring that it's compatible with the ML model's input requirements.\",\n      \
  \      \"user_review_goal\": \"Real-time market data should be processed and formatted appropriately, ready for use in the\
  \ trading algorithm.\"\n        },\n        {\n            \"description\": \"Design and implement the Graf visualization\
  \ component using D3.js that dynamically displays account growth and strategy insights.\",\n            \"programmatic_goal\"\
  : \"Produce a series of D3.js charts that are connected to a mock backend data source reflecting hypothetical account performance\
  \ and strategy statistics.\",\n            \"user_review_goal\": \"Visually appealing and interactive charts should display\
  \ simulated account performance metrics on the front-end.\"\n        },\n        {\n            \"description\": \"Develop\
  \ the user feedback mechanism to personalize AI strategies and risk management rules.\",\n            \"programmatic_goal\"\
  : \"Construct an interface for user feedback input that adapts the AI model's parameters and incorporate a versioning system\
  \ to track changes.\",\n            \"user_review_goal\": \"Users must be able to provide feedback that influence strategy\
  \ decisions, with the application showing updated strategy parameters accordingly.\"\n        },\n        {\n          \
  \  \"description\": \"Implement risk management algorithms to autonomously calculate stop-loss and take-profit parameters\
  \ based on AI and ML recommendations.\",\n            \"programmatic_goal\": \"Code an algorithm using ML outputs to determine\
  \ and set suitable stop-loss and take-profit thresholds, including logging capabilities for analysis.\",\n            \"\
  user_review_goal\": \"The app should autonomously assign stop-loss and take-profit levels to trades based on AI analysis,\
  \ with logs available for review.\"\n        },\n        {\n            \"description\": \"Incorporate real-time news analysis\
  \ into the trading algorithm using cheerio and axios to parse news feeds.\",\n            \"programmatic_goal\": \"Establish\
  \ a function that fetches, scores, and integrates the sentiment derived from financial news articles into the trading decision\
  \ process.\",\n            \"user_review_goal\": \"The AI should exhibit changes in trading behavior based on the interpreted\
  \ sentiment of recent financial news articles.\"\n        },\n        {\n            \"description\": \"Finalize and integrate\
  \ all components into a cohesive system with an initial testing phase on a demo trading account.\",\n            \"programmatic_goal\"\
  : \"Complete the setup ensuring all components (AI/ML engine, Graf, data processing, and risk management) interact as required,\
  \ with automated tests validating the basic workflow on a demo MetaTrader account.\",\n            \"user_review_goal\"\
  : \"The integrated system must perform analysis, execute trades, and visually represent the results on a user interface,\
  \ all functioning correctly when assessed with a demo account.\"\n        }\n    ]\n}\n```"
