endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are a full stack software developer who works in a software development agency. You write very modular and
    clean code. Your job is to implement tasks that your tech lead assigns you. Each task has a description of what needs
    to be implemented, a programmatic goal that will determine if a task can be marked as done and user-review goal that will
    determine if a task is done or not but from a user perspective since it will be reviewed by a human.
- role: user
  content: "Here is how the file `utils/metaApiConnection.js` looks like right now:\n```\nconst MetaApi = require('metaapi.cloud-sdk').default;\n\
    \nclass MetaApiConnection {\n  constructor(metaApiKey, accountId) {\n    if (!metaApiKey || !accountId) {\n      throw\
    \ new Error('MetaApi key or account ID is missing.');\n    }\n    this.api = new MetaApi(metaApiKey);\n    this.accountId\
    \ = accountId;\n  }\n\n  async connect() {\n    try {\n      const account = await this.api.metatraderAccountApi.getAccount(this.accountId);\n\
    \      const connection = await account.connect();\n      console.log(`Connected to ${account.name}, connection id is\
    \ ${connection.id}.`);\n      return connection;\n    } catch (error) {\n      console.error(`Error during MetaApi connection:\
    \ ${error.message}`);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = MetaApiConnection;\n\n```\n\nAnd here is\
    \ the new implementation for the same file:\n```\nconst MetaApi = require('metaapi.cloud-sdk').default;\n\nclass MetaApiConnection\
    \ {\n  // [OLD CODE] Existing methods\n\n  async applyRiskParameters(account, tradeId, stopLoss, takeProfit) {\n    try\
    \ {\n      let modifyTradePayload = {\n        type: 'POSITION_MODIFY',\n        positionId: tradeId,\n        stopLoss:\
    \ stopLoss,\n        takeProfit: takeProfit\n      };\n      await account.modifyPosition(tradeId, modifyTradePayload);\n\
    \      console.log(`Modified trade ${tradeId} with stopLoss: ${stopLoss}, takeProfit: ${takeProfit}`);\n    } catch (error)\
    \ {\n      console.error(`Error applying risk parameters to MetaTrader: ${error.message}`);\n      throw error;\n    }\n\
    \  }\n}\n\nmodule.exports = MetaApiConnection;\n```\n\nNow, implement the new changes into the previously implemented\
    \ file and return the entirely coded file. Do not add any lines of code that are not in the previously coded file or the\
    \ new implementation but only combine those two.\n\n**IMPORTANT**\nAll lines of code in the new implementation should\
    \ be present. From the old implementation, only take the ones that are replaced with the comment `[OLD CODE]` in the new\
    \ implementation\n\n**IMPORTANT**\nMake sure that you respond with all lines of code that are replaced by these comments,\
    \ including all control structures, error handling, and any other relevant logic that was in the original code.\nUnder\
    \ no circumstances should you ever leave any part of the code snippet unwritten. Every single line of code that exists\
    \ in the place where the comment lives right now should be replaced. Do not include any code that is above or below the\
    \ comment but only the code that should be in the position of the comment."
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"file_content\": {\n        \"type\": \"string\",\n     \
    \   \"description\": \"Fully coded file. This contains only the lines of code and no other text.\"\n    }\n}\n```\n\n"
response: "```json\n{\n    \"file_content\": \"const MetaApi = require('metaapi.cloud-sdk').default;\\n\\nclass MetaApiConnection\
  \ {\\n  constructor(metaApiKey, accountId) {\\n    if (!metaApiKey || !accountId) {\\n      throw new Error('MetaApi key\
  \ or account ID is missing.');\\n    }\\n    this.api = new MetaApi(metaApiKey);\\n    this.accountId = accountId;\\n  }\\\
  n\\n  async connect() {\\n    try {\\n      const account = await this.api.metatraderAccountApi.getAccount(this.accountId);\\\
  n      const connection = await account.connect();\\n      console.log(`Connected to ${account.name}, connection id is ${connection.id}.`);\\\
  n      return connection;\\n    } catch (error) {\\n      console.error(`Error during MetaApi connection: ${error.message}`);\\\
  n      throw error;\\n    }\\n  }\\n\\n  async applyRiskParameters(account, tradeId, stopLoss, takeProfit) {\\n    try {\\\
  n      let modifyTradePayload = {\\n        type: 'POSITION_MODIFY',\\n        positionId: tradeId,\\n        stopLoss:\
  \ stopLoss,\\n        takeProfit: takeProfit\\n      };\\n      await account.modifyPosition(tradeId, modifyTradePayload);\\\
  n      console.log(`Modified trade ${tradeId} with stopLoss: ${stopLoss}, takeProfit: ${takeProfit}`);\\n    } catch (error)\
  \ {\\n      console.error(`Error applying risk parameters to MetaTrader: ${error.message}`);\\n      throw error;\\n   \
  \ }\\n  }\\n}\\n\\nmodule.exports = MetaApiConnection;\\n\"\n}\n```"
