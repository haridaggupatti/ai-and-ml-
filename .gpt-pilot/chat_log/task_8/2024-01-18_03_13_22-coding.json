{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "command",
        "command": {
          "command": "npm install axios @tensorflow/tfjs-node",
          "timeout": 60000
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "riskPredictionModel.js",
          "path": "ai/riskPredictionModel.js",
          "content": "const tf = require('@tensorflow/tfjs');\nrequire('@tensorflow/tfjs-node');\nconst axios = require('axios');\n\nclass RiskPredictionModel {\n  constructor() {\n    // Initialize the model or load it if already trained.\n  }\n\n  async updateModelWithExternalData(externalDataSource) {\n    const externalData = await axios.get(externalDataSource);\n    const parsedData = this.parseExternalData(externalData.data);\n    // [OLD CODE] Implement the training procedure with the parsed external data\n  }\n\n  async predict(marketData) {\n    // [OLD CODE] Implement actual prediction logic based on the marketData and return calculated values\n    return {\n      stopLoss: calculatedStopLoss,\n      takeProfit: calculatedTakeProfit\n    };\n  }\n\n  parseExternalData(data) {\n    // [OLD CODE] Logic to parse and structure the external data\n  }\n}\n\nmodule.exports = RiskPredictionModel;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "externalLearningService.js",
          "path": "services/externalLearningService.js",
          "content": "const axios = require('axios');\n\nclass ExternalLearningService {\n  constructor(apiEndpoint) {\n    this.apiEndpoint = apiEndpoint;\n  }\n\n  async gatherInformation() {\n    try {\n      const response = await axios.get(this.apiEndpoint);\n      // [OLD CODE] Parse and return the useful information from the response\n      return response.data;\n    } catch (error) {\n      console.error(`Error gathering external information: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = ExternalLearningService;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "riskManagementService.js",
          "path": "services/riskManagementService.js",
          "content": "const ExternalLearningService = require('./externalLearningService');\n\nclass RiskManagementService {\n  constructor(model, externalLearningEndpoint) {\n    this.model = model;\n    this.externalLearningService = new ExternalLearningService(externalLearningEndpoint);\n  }\n\n  async updateModelWithExternalData() {\n    const information = await this.externalLearningService.gatherInformation();\n    await this.model.updateModelWithExternalData(information);\n  }\n\n  // [OLD CODE] Keep existing methods such as calculateRiskParameters\n}\n\nmodule.exports = RiskManagementService;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "tradeController.js",
          "path": "controllers/tradeController.js",
          "content": "// [OLD CODE] Include all previous imports and initial class structure\n\nclass TradeController {\n  constructor() {\n    // [OLD CODE] Keep the existing constructor initialization\n    // Replace with actual API endpoint\n    // INPUT_REQUIRED {Store the endpoint for external learning service}\n    const externalLearningEndpoint = 'https://external.api/learning-source';\n\n    this.riskManagementService = new RiskManagementService(\n      new RiskPredictionModel(),\n      externalLearningEndpoint\n    );\n  }\n\n  // [OLD CODE] Keep the rest of the controller functionality\n\n}\n\nmodule.exports = TradeController;\n"
        }
      }
    ]
  }
}