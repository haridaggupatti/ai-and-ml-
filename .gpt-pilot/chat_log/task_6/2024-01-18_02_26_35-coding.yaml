endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are a full stack software developer who works in a software development agency. You write very modular and
    clean code. Your job is to implement tasks that your tech lead assigns you. Each task has a description of what needs
    to be implemented, a programmatic goal that will determine if a task can be marked as done and user-review goal that will
    determine if a task is done or not but from a user perspective since it will be reviewed by a human.
- role: user
  content: "Here is how the file `/index.js` looks like right now:\n```\nrequire('dotenv').config();\nconst express = require('express');\n\
    const mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst authRoutes = require('./routes/authRoutes');\n\
    const metaApiRoutes = require('./routes/metaApiRoutes');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\
    \nmongoose.connect('mongodb://localhost/ai_and_ml_');\n\napp.use(bodyParser.json());\napp.use('/api/auth', authRoutes);\n\
    app.use('/api/metaapi', metaApiRoutes);\n\napp.get('/ping', (req, res) => {\n  res.send('pong');\n});\n\napp.use((err,\
    \ req, res, next) => {\n  logger.error(err.stack);\n  const status = err.status || 500;\n  res.status(status).json({ message:\
    \ err.message || \"Internal Server Error\" });\n});\n\nconst winston = require('winston');\nconst logger = winston.createLogger({\n\
    \  level: 'error',\n  format: winston.format.json(),\n  transports: [\n    new winston.transports.File({ filename: 'error.log',\
    \ level: 'error' })\n  ]\n});\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n}).on('error',\
    \ (err) => {\n  console.error(`Error starting server: ${err.message}`);\n});\n\n```\n\nAnd here is the new implementation\
    \ for the same file:\n```\n[OLD CODE] required imports and middleware setup\n\nconst grafRoutes = require('./routes/grafRoutes');\n\
    app.use('/api/graf', grafRoutes);\n\n[OLD CODE] remaining server setup and starting logic\n\n```\n\nNow, implement the\
    \ new changes into the previously implemented file and return the entirely coded file. Do not add any lines of code that\
    \ are not in the previously coded file or the new implementation but only combine those two.\n\n**IMPORTANT**\nAll lines\
    \ of code in the new implementation should be present. From the old implementation, only take the ones that are replaced\
    \ with the comment `[OLD CODE]` in the new implementation\n\n**IMPORTANT**\nMake sure that you respond with all lines\
    \ of code that are replaced by these comments, including all control structures, error handling, and any other relevant\
    \ logic that was in the original code.\nUnder no circumstances should you ever leave any part of the code snippet unwritten.\
    \ Every single line of code that exists in the place where the comment lives right now should be replaced. Do not include\
    \ any code that is above or below the comment but only the code that should be in the position of the comment."
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"file_content\": {\n        \"type\": \"string\",\n     \
    \   \"description\": \"Fully coded file. This contains only the lines of code and no other text.\"\n    }\n}\n```\n\n"
response: "```json\n{\n    \"file_content\": \"require('dotenv').config();\\nconst express = require('express');\\nconst mongoose\
  \ = require('mongoose');\\nconst bodyParser = require('body-parser');\\nconst authRoutes = require('./routes/authRoutes');\\\
  nconst metaApiRoutes = require('./routes/metaApiRoutes');\\nconst grafRoutes = require('./routes/grafRoutes');\\nconst app\
  \ = express();\\nconst port = process.env.PORT || 3000;\\n\\nmongoose.connect('mongodb://localhost/ai_and_ml_');\\n\\napp.use(bodyParser.json());\\\
  napp.use('/api/auth', authRoutes);\\napp.use('/api/metaapi', metaApiRoutes);\\napp.use('/api/graf', grafRoutes);\\n\\napp.get('/ping',\
  \ (req, res) => {\\n  res.send('pong');\\n});\\n\\napp.use((err, req, res, next) => {\\n  logger.error(err.stack);\\n  const\
  \ status = err.status || 500;\\n  res.status(status).json({ message: err.message || \\\"Internal Server Error\\\" });\\\
  n});\\n\\nconst winston = require('winston');\\nconst logger = winston.createLogger({\\n  level: 'error',\\n  format: winston.format.json(),\\\
  n  transports: [\\n    new winston.transports.File({ filename: 'error.log', level: 'error' })\\n  ]\\n});\\n\\napp.listen(port,\
  \ () => {\\n  console.log(`Server is running on port ${port}`);\\n}).on('error', (err) => {\\n  console.error(`Error starting\
  \ server: ${err.message}`);\\n});\\n\"\n}\n```"
