{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "grafRoutes.js",
          "path": "/routes/grafRoutes.js",
          "content": "const express = require('express');\nconst { fetchAccountGrowthData } = require('../controllers/grafController');\nconst router = express.Router();\n\nrouter.get('/account-growth', async (req, res) => {\n  try {\n    const data = await fetchAccountGrowthData();\n    res.json(data);\n  } catch(error) {\n    res.status(500).json({ message: 'Failed to fetch account growth data.' });\n  }\n});\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "grafController.js",
          "path": "/controllers/grafController.js",
          "content": "const fetchAccountGrowthData = async () => {\n  // Placeholder: Return simulated or historical growth data\n  const simulatedData = [\n    { date: '2023-01-01', value: 1000 },\n    { date: '2023-01-02', value: 1050 },\n    // ... more data\n  ];\n  return simulatedData;\n};\n\nmodule.exports = {\n  fetchAccountGrowthData\n};\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "AccountGrowthModel.js",
          "path": "/models/AccountGrowthModel.js",
          "content": "const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst AccountGrowthSchema = new Schema({\n  date: Date,\n  value: Number\n});\n\nmodule.exports = mongoose.model('AccountGrowth', AccountGrowthSchema);\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "index.js",
          "path": "/index.js",
          "content": "[OLD CODE] required imports and middleware setup\n\nconst grafRoutes = require('./routes/grafRoutes');\napp.use('/api/graf', grafRoutes);\n\n[OLD CODE] remaining server setup and starting logic\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "graf.html",
          "path": "/public/graf.html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Graf Visualization</title>\n    <link rel=\"stylesheet\" href=\"/styles/graf.css\">\n    <script src=\"https://d3js.org/d3.v6.min.js\"></script>\n</head>\n<body>\n    <div id=\"graf-container\"></div>\n    <script src=\"/scripts/graf.js\"></script>\n</body>\n</html>\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "graf.css",
          "path": "/public/styles/graf.css",
          "content": "#graf-container {\n  width: 90%;\n  height: 500px; /* Adjust the height as needed */\n  margin: auto;\n  position: relative;\n}\n\n/* Additional styling as required */\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "graf.js",
          "path": "/public/scripts/graf.js",
          "content": "document.addEventListener('DOMContentLoaded', function() {\n  fetch('/api/graf/account-growth')\n    .then(response => response.json())\n    .then(data => {\n      renderGraph(data);\n    })\n    .catch(error => {\n      console.error('Error fetching account growth data:', error);\n    });\n});\n\nfunction renderGraph(data) {\n  // Set dimensions and margins for the graph\n  const margin = {top: 30, right: 30, bottom: 70, left: 60},\n      width = 460 - margin.left - margin.right,\n      height = 400 - margin.top - margin.bottom;\n\n  // Append an SVG object to the body of the page\n  // ...\n  // Bars\n  // ...\n}\n\n/* Additional D3.js functionality as required */\n"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm install d3 --save",
          "timeout": 10000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm start",
          "timeout": 5000,
          "success_message": "Server is running",
          "command_id": "start_server"
        }
      }
    ]
  }
}