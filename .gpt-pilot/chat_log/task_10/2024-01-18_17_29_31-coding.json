{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": ".env",
          "path": "/.env",
          "content": "JWT_SECRET=your_jwt_secret\nMONGODB_URI=your_mongodb_uri\nPORT=3001\nDEMO_API_ENDPOINT=http://demo.api/marketdata\nDEMO_META_API_KEY=your_demo_meta_api_key\nDEMO_META_API_ACCOUNT_ID=your_demo_meta_api_account_id\n// INPUT_REQUIRED: Add your JWT secret, MongoDB URI, demo API endpoint, MetaApi credentials"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "TradingOrchestrator.js",
          "path": "/services/TradingOrchestrator.js",
          "content": "const axios = require('axios');\nconst TradeController = require('../controllers/TradeController');\nconst RiskManagementService = require('../services/RiskManagementService');\nconst RiskPredictionModel = require('../ai/RiskPredictionModel');\nconst logger = require('../utils/logger');\nrequire('dotenv').config();\n\nclass TradingOrchestrator {\n  constructor() {\n    const metaApiConnection = new MetaApiConnection(process.env.DEMO_META_API_KEY, process.env.DEMO_META_API_ACCOUNT_ID);\n    this.tradeController = new TradeController(metaApiConnection);\n    this.dataProcessor = new DataProcessor(new MetaApiClient(process.env.DEMO_META_API_KEY));\n  }\n\n  async startDemoTrading(user) {\n    try {\n      const marketData = await axios.get(process.env.DEMO_API_ENDPOINT);\n      const strategyConfig = await applyFeedbackToStrategy(user._id, {/* [OLD CODE] Base strategy configuration object */});\n      const decision = await makeDecision(user._id, strategyConfig, marketData);\n      const grafData = await fetchAccountGrowthData();\n      this.visualizeWithGraf(grafData);\n      return { success: true, message: 'Demo trading session started successfully' };\n    } catch (error) {\n      logger.error(`Error during demo trading: ${error.message}`);\n      return { success: false, message: 'Error during demo trading session', error: error.message };\n    }\n  }\n}\nmodule.exports = TradingOrchestrator;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "TradeController.js",
          "path": "/controllers/TradeController.js",
          "content": "const MetaApiConnection = require('../utils/metaApiConnection');\nconst RiskManagementService = require('../services/riskManagementService');\nconst RiskPredictionModel = require('../ai/riskPredictionModel');\nconst logger = require('../utils/logger');\n\nclass TradeController {\n  constructor(metaApiConnection) {\n    this.metaApiConnection = metaApiConnection;\n    const externalLearningEndpoint = 'https://external.api/learning-source';\n    this.riskManagementService = new RiskManagementService(\n      new RiskPredictionModel(),\n      externalLearningEndpoint\n    );\n  }\n\n  // [OLD CODE] Add all other methods and logic required for the TradeController\n}\n\nmodule.exports = TradeController;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "index.html",
          "path": "/public/index.html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>AI and ML Trading Application</title>\n    <script src=\"/scripts/app.js\"></script>\n</head>\n<body>\n    <button id=\"start-demo-button\">Start Demo Trading</button>\n    <div id=\"graf-container\"></div>\n    <script>\n      document.getElementById('start-demo-button').addEventListener('click', () => {\n          app.startDemoTrading();\n      });\n    </script>\n    <script src=\"/scripts/graf.js\"></script>\n</body>\n</html>\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "app.js",
          "path": "/public/scripts/app.js",
          "content": "const app = {\n    startDemoTrading: async function () {\n        const response = await fetch('/api/trading/start-demo-trading', { method: 'POST' });\n        const data = await response.json();\n        console.log(data);\n        if (data.success) {\n            this.loadGrafVisualization();\n        } else {\n            console.error('Failed to start demo trading:', data.message);\n        }\n    },\n\n    loadGrafVisualization: async function() {\n        const grafResponse = await fetch('/api/graf/account-growth');\n        const grafData = await grafResponse.json();\n        renderGrafVisualization(grafData); // [OLD CODE] Add the renderGraph function from graf.js\n    }\n};\n"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "mongod",
          "timeout": 10000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm start",
          "timeout": 10000,
          "success_message": "Server listening on port 3001",
          "command_id": "start_server"
        }
      }
    ]
  }
}