{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "tradingOrchestrator.js",
          "path": "services/tradingOrchestrator.js",
          "content": "const axios = require('axios');\nconst TradeController = require('../controllers/tradeController');\nconst { DataProcessor } = require('../ai/dataProcessor');\nconst { MetaApiClient } = require('./metaApiClient');\n\nclass TradingOrchestrator {\n  constructor() {\n    this.tradeController = new TradeController();\n    this.dataProcessor = new DataProcessor(new MetaApiClient(process.env.META_API_KEY));\n  }\n\n  async startDemoTrading(user) {\n    const marketData = await this.fetchDemoMarketData();\n    // Simulate trading decision and execution\n    // [OLD CODE] The demo trading session implementation\n  }\n\n  async fetchDemoMarketData() {\n    const accountId = process.env.META_API_ACCOUNT_ID; // INPUT_REQUIRED: Replace with your MetaApi account ID\n    // Sample static market data\n    // Replace this with the actual call to fetch data from MetaApi or other source\n    return [\n      { time: '2023-04-01T00:00:00.000Z', open: 1.1234, high: 1.1240, low: 1.1230, close: 1.1238 }\n      // ... more data\n    ];\n  }\n\n}\n\nmodule.exports = TradingOrchestrator;\n"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm start",
          "timeout": 10000,
          "success_message": "Server listening on port"
        }
      },
      {
        "type": "human_intervention",
        "human_intervention_description": "Check the server logs and visualizations in the application interface to ensure that the demo trading process is working as expected. Look for any errors or unexpected behavior and debug as necessary."
      }
    ]
  }
}