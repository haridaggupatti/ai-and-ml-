{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "index.js",
          "path": "/index.js",
          "content": "require('dotenv').config();\nconsole.log('Starting the ai_and_ml_ application...');\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst authRoutes = require('./routes/authRoutes');\nconst metaApiRoutes = require('./routes/metaApiRoutes');\nconst grafRoutes = require('./routes/grafRoutes');\nconst app = express();\nconst port = process.env.PORT || 3001;\nconst logger = require('./utils/logger');\n\nmongoose.connect('mongodb://localhost/ai_and_ml_');\n\napp.use(bodyParser.json());\napp.use('/api/auth', authRoutes);\napp.use('/api/metaapi', metaApiRoutes);\napp.use('/api/graf', grafRoutes);\nconst feedbackRoutes = require('./routes/feedbackRoutes');\n\napp.use('/api/feedback', feedbackRoutes);\n\nconst tradingOrchestratorRoutes = require('./routes/tradingOrchestratorRoutes');\napp.use('/api/trading', tradingOrchestratorRoutes);\n\nconst homeRoutes = require('./routes/homeRoutes');\napp.use(express.static('public'));\napp.use('/', homeRoutes);\n\napp.get('/ping', (req, res) => {\n  res.send('pong');\n});\n\napp.get('/api/port', (req, res) => {\n  res.json({ port: port });\n});\n\nconsole.log('Attempting to listen on port ' + port + '...');\napp.use((err, req, res, next) => {\n  logger.error(err.stack);\n  const status = err.status || 500;\n  res.status(status).json({ message: err.message || \"Internal Server Error\" });\n});\n\napp.listen(port, () => {\n  logger.info(`Server listening on port ${port}`);\n}).on('error', (err) => {\n  if(err.code === 'EADDRINUSE') {\n    logger.error(`Error: Port ${port} is already in use`);\n  } else {\n    logger.error(`Server failed to start: ${err.message}`);\n  }\n});\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "logger.js",
          "path": "/utils/logger.js",
          "content": "const winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.Console({ format: winston.format.simple() }),\n  ],\n});\n\nmodule.exports = logger;\n"
        }
      }
    ]
  }
}